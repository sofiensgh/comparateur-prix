{/*
const puppeteer = require("puppeteer");

(async () => {
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
  });

  const page = await browser.newPage();
  await page.goto('https://www.tunisianet.com.tn/596-smartphone-tunisie?page=1&order=product.price.asc',{
    waitUntil: "domcontentloaded"
  });

  // Initialize an empty array to store items
  let items = [];

  let isBtnDisabled = false;
  while (!isBtnDisabled) {
    const productsHandles = await page.$$('.item-product');
    for (const productHandle of productsHandles) {
      try {
        // Extract title, price, and image using page.evaluate
        const title = await productHandle.$eval(
          ".wb-product-desc.product-description > h2 > a",
          (el) => el.textContent.trim()
        );
        const price = await productHandle.$eval(
          ".wb-product-desc.product-description > .product-price-and-shipping > span",
          (el) => el.textContent.trim()
        );
        const reference = await productHandle.$eval(
          ".wb-product-desc.product-description > span.product-reference",
          (el) => el.textContent.trim()
        );
        const discription = await productHandle.$eval(
          ".wb-product-desc.product-description > div.listds > a",
          (el) => el.textContent.trim()
        );

        // Extract availability with multiple conditions
        let availability = 'In stock'; // Default value
        const inStockElement = await productHandle.$(".wb-product-desc.product-description > div > span.in-stock");
        const laterStockElement = await productHandle.$(".wb-product-desc.product-description > div > span.later-stock");

        if (inStockElement) {
          availability = await inStockElement.evaluate(el => el.textContent.trim());
        } else if (laterStockElement) {
          availability = await laterStockElement.evaluate(el => el.textContent.trim());
        } else {
          availability = 'Out of stock'; // Add more conditions as needed
        }

        const img = await productHandle.$eval(
          ".wb-image-block img.img-responsive",
          (el) => el.getAttribute("src")
        );

        // Push the extracted data into the items array
        items.push({ title, price, reference, discription, availability, img });
      } catch (error) {
        console.error('Error extracting product details:', error);
        // If there's an error, push a placeholder item into the items array
        items.push({ title: 'Error', price: 'Error', reference: 'Error', discription: 'Error', availability: 'Error', img: 'Error' });
      }
    }

    await page.waitForSelector("li > a.next.js-search-link", { visible: true });
    const is_disabled = await page.$('li > a.next.js-search-link.disabled') !== null;
    isBtnDisabled = is_disabled;
    if (!is_disabled) {
      await page.click("li > a.next.js-search-link");
      await page.waitForNavigation({ waitUntil: 'domcontentloaded' });
    }
  }

  // Log the total number of items
  console.log('Total items:', items.length);

  // Log or display all items
  console.log(items);

  // Close the browser
  await browser.close();
})();*/}
